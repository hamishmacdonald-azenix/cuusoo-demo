{
  "definition": {
    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
    "actions": {
      "Check_if_call_is_from_ADF_webhook": {
        "actions": {
          "Post_to_callback_URI_-_Completion": {
            "inputs": {
              "body": {
                "response": {
                  "job_id": "@{variables('job_id')}",
                  "life_cycle_state": "@{variables('life_cycle_state')}",
                  "output": "Job run successfully",
                  "result_state": "@{variables('result_state')}",
                  "run_id": "@{variables('run_id')}"
                }
              },
              "method": "POST",
              "uri": "@{triggerBody()['callBackUri']}"
            },
            "runAfter": {},
            "type": "Http"
          }
        },
        "expression": {
          "and": [
            {
              "equals": [
                "@contains(triggerBody(), 'callBackUri')",
                true
              ]
            }
          ]
        },
        "runAfter": {
          "Check_if_we_have_a_valid_job": [
            "Succeeded"
          ]
        },
        "type": "If"
      },
      "Check_if_we_have_a_valid_job": {
        "actions": {
          "Is_there_a_running_job": {
            "actions": {
              "Check_if_call_is_from_ADF_webhook_-_Already_running": {
                "actions": {
                  "Post_to_callback_URI_-_Already_running": {
                    "inputs": {
                      "body": {
                        "response": {
                          "job_id": "@{variables('job_id')}",
                          "life_cycle_state": "Already Running",
                          "output": "Job @{variables('job_id')} is already running. Try again later",
                          "result_state": "Already Running",
                          "run_id": "@{variables('run_id')}"
                        }
                      },
                      "method": "POST",
                      "uri": "@{triggerBody()['callBackUri']}"
                    },
                    "runAfter": {},
                    "type": "Http"
                  }
                },
                "expression": {
                  "and": [
                    {
                      "equals": [
                        "@contains(triggerBody(), 'callBackUri')",
                        true
                      ]
                    }
                  ]
                },
                "runAfter": {},
                "type": "If"
              }
            },
            "else": {
              "actions": {
                "Create_a_new_job_run": {
                  "inputs": {
                    "body": {
                      "job_id": "@variables('job_id')"
                    },
                    "headers": {
                      "Authorization": "Bearer @{variables('databricksPATToken')}"
                    },
                    "method": "POST",
                    "uri": "@{variables('databricks_api_base_endpoint')}/run-now"
                  },
                  "runAfter": {},
                  "type": "Http"
                },
                "Delay_for_10_seconds": {
                  "inputs": {
                    "interval": {
                      "count": 10,
                      "unit": "Second"
                    }
                  },
                  "runAfter": {
                    "Set_run_id_variable": [
                      "Succeeded"
                    ]
                  },
                  "type": "Wait"
                },
                "Get_the_job_run_initial_status": {
                  "inputs": {
                    "headers": {
                      "Authorization": "Bearer @{variables('databricksPATToken')}"
                    },
                    "method": "GET",
                    "queries": {
                      "run_id": "@variables('run_id')"
                    },
                    "uri": "@{variables('databricks_api_base_endpoint')}/runs/get"
                  },
                  "runAfter": {
                    "Delay_for_10_seconds": [
                      "Succeeded"
                    ]
                  },
                  "type": "Http"
                },
                "Loop_until_job_run_is_completed": {
                  "actions": {
                    "Delay_for_30_seconds": {
                      "inputs": {
                        "interval": {
                          "count": 30,
                          "unit": "Second"
                        }
                      },
                      "runAfter": {
                        "Set_result_state_variable_-_loop": [
                          "Succeeded"
                        ]
                      },
                      "type": "Wait"
                    },
                    "Get_the_job_run_status_-_loop": {
                      "inputs": {
                        "headers": {
                          "Authorization": "Bearer @{variables('databricksPATToken')}"
                        },
                        "method": "GET",
                        "queries": {
                          "run_id": "@variables('run_id')"
                        },
                        "uri": "@{variables('databricks_api_base_endpoint')}/runs/get"
                      },
                      "runAfter": {},
                      "type": "Http"
                    },
                    "Set_life_cycle_state_variable_-_loop": {
                      "inputs": {
                        "name": "life_cycle_state",
                        "value": "@{body('Get_the_job_run_status_-_loop')?['state']?['life_cycle_state']}"
                      },
                      "runAfter": {
                        "Get_the_job_run_status_-_loop": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable"
                    },
                    "Set_result_state_variable_-_loop": {
                      "inputs": {
                        "name": "result_state",
                        "value": "@{body('Get_the_job_run_status_-_loop')?['state']?['result_state']}"
                      },
                      "runAfter": {
                        "Set_life_cycle_state_variable_-_loop": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable"
                    }
                  },
                  "expression": "@equals(contains(variables('life_cycle_state_array'), variables('life_cycle_state')), false)",
                  "limit": {
                    "count": 120,
                    "timeout": "PT1H"
                  },
                  "runAfter": {
                    "Set_life_cycle_state_variable": [
                      "Succeeded"
                    ]
                  },
                  "type": "Until"
                },
                "Set_life_cycle_state_variable": {
                  "inputs": {
                    "name": "life_cycle_state",
                    "value": "@{body('Get_the_job_run_initial_status')?['state']?['life_cycle_state']}"
                  },
                  "runAfter": {
                    "Get_the_job_run_initial_status": [
                      "Succeeded"
                    ]
                  },
                  "type": "SetVariable"
                },
                "Set_run_id_variable": {
                  "inputs": {
                    "name": "run_id",
                    "value": "@{string(body('Create_a_new_job_run')?['run_id'])}"
                  },
                  "runAfter": {
                    "Create_a_new_job_run": [
                      "Succeeded"
                    ]
                  },
                  "type": "SetVariable"
                }
              }
            },
            "expression": {
              "and": [
                {
                  "equals": [
                    "@contains(body('Look_for_running_jobs'), 'runs')",
                    true
                  ]
                }
              ]
            },
            "runAfter": {
              "Look_for_running_jobs": [
                "Succeeded"
              ]
            },
            "type": "If"
          },
          "Look_for_running_jobs": {
            "inputs": {
              "headers": {
                "Authorization": "Bearer @{variables('databricksPATToken')}"
              },
              "method": "GET",
              "queries": {
                "active_only": "true",
                "job_id": "@variables('job_id')"
              },
              "uri": "@{variables('databricks_api_base_endpoint')}/runs/list?job_id=@{variables('job_id')}&active_only=true"
            },
            "runAfter": {},
            "type": "Http"
          }
        },
        "expression": {
          "and": [
            {
              "not": {
                "equals": [
                  "@variables('job_id')",
                  0
                ]
              }
            }
          ]
        },
        "runAfter": {
          "Loop_through_jobs": [
            "Succeeded"
          ]
        },
        "type": "If"
      },
      "Fetch_databricksBaseURL_secret": {
        "inputs": {
          "host": {
            "connection": {
              "name": "@parameters('$connections')['keyvault']['connectionId']"
            }
          },
          "method": "get",
          "path": "/secrets/@{encodeURIComponent('databricksBaseURL')}/value"
        },
        "runAfter": {},
        "type": "ApiConnection"
      },
      "Fetch_databricksPATToken_secret": {
        "inputs": {
          "host": {
            "connection": {
              "name": "@parameters('$connections')['keyvault']['connectionId']"
            }
          },
          "method": "get",
          "path": "/secrets/@{encodeURIComponent('databricksPATToken')}/value"
        },
        "runAfter": {
          "Initialize_databricks_api_base_endpoint_variable": [
            "Succeeded"
          ]
        },
        "type": "ApiConnection"
      },
      "Get_job_list": {
        "inputs": {
          "headers": {
            "Authorization": "Bearer @{variables('databricksPATToken')}"
          },
          "method": "GET",
          "uri": "@{variables('databricks_api_base_endpoint')}/list"
        },
        "runAfter": {
          "Initialize_result_state_variable": [
            "Succeeded"
          ]
        },
        "type": "Http"
      },
      "Initialize_databricksPATToken_variable": {
        "inputs": {
          "variables": [
            {
              "name": "databricksPATToken",
              "type": "string",
              "value": "@body('Fetch_databricksPATToken_secret')?['value']"
            }
          ]
        },
        "runAfter": {
          "Fetch_databricksPATToken_secret": [
            "Succeeded"
          ]
        },
        "type": "InitializeVariable"
      },
      "Initialize_databricks_api_base_endpoint_variable": {
        "inputs": {
          "variables": [
            {
              "name": "databricks_api_base_endpoint",
              "type": "string",
              "value": "https://@{body('Fetch_databricksBaseURL_secret')?['value']}/api/2.1/jobs"
            }
          ]
        },
        "runAfter": {
          "Fetch_databricksBaseURL_secret": [
            "Succeeded"
          ]
        },
        "type": "InitializeVariable"
      },
      "Initialize_job_id_variable": {
        "inputs": {
          "variables": [
            {
              "name": "job_id",
              "type": "string",
              "value": "0"
            }
          ]
        },
        "runAfter": {
          "Initialize_databricksPATToken_variable": [
            "Succeeded"
          ]
        },
        "type": "InitializeVariable"
      },
      "Initialize_life_cycle_state_array_variable": {
        "inputs": {
          "variables": [
            {
              "name": "life_cycle_state_array",
              "type": "array",
              "value": "@createArray('PENDING','RUNNING','TERMINATING')"
            }
          ]
        },
        "runAfter": {
          "Initialize_life_cycle_state_variable": [
            "Succeeded"
          ]
        },
        "type": "InitializeVariable"
      },
      "Initialize_life_cycle_state_variable": {
        "inputs": {
          "variables": [
            {
              "name": "life_cycle_state",
              "type": "string"
            }
          ]
        },
        "runAfter": {
          "Initialize_run_id_variable": [
            "Succeeded"
          ]
        },
        "type": "InitializeVariable"
      },
      "Initialize_result_state_variable": {
        "inputs": {
          "variables": [
            {
              "name": "result_state",
              "type": "string"
            }
          ]
        },
        "runAfter": {
          "Initialize_life_cycle_state_array_variable": [
            "Succeeded"
          ]
        },
        "type": "InitializeVariable"
      },
      "Initialize_run_id_variable": {
        "inputs": {
          "variables": [
            {
              "name": "run_id",
              "type": "string",
              "value": "0"
            }
          ]
        },
        "runAfter": {
          "Initialize_job_id_variable": [
            "Succeeded"
          ]
        },
        "type": "InitializeVariable"
      },
      "Loop_through_jobs": {
        "actions": {
          "Check_if_job_is_required_job": {
            "actions": {
              "Set_job_id_variable": {
                "inputs": {
                  "name": "job_id",
                  "value": "@{string(items('Loop_through_jobs')?['job_id'])}"
                },
                "runAfter": {},
                "type": "SetVariable"
              }
            },
            "expression": {
              "and": [
                {
                  "equals": [
                    "@items('Loop_through_jobs')?['settings']?['name']",
                    "@triggerBody()?['job_name']"
                  ]
                }
              ]
            },
            "runAfter": {},
            "type": "If"
          }
        },
        "foreach": "@body('Parse_jobs_JSON')?['jobs']",
        "runAfter": {
          "Parse_jobs_JSON": [
            "Succeeded"
          ]
        },
        "type": "Foreach"
      },
      "Parse_jobs_JSON": {
        "inputs": {
          "content": "@body('Get_job_list')",
          "schema": {
            "properties": {
              "has_more": {
                "type": "boolean"
              },
              "jobs": {
                "items": {
                  "properties": {
                    "created_time": {
                      "type": "integer"
                    },
                    "creator_user_name": {
                      "type": "string"
                    },
                    "job_id": {
                      "type": "integer"
                    },
                    "settings": {
                      "properties": {
                        "email_notifications": {
                          "properties": {
                            "no_alert_for_skipped_runs": {
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        },
                        "format": {
                          "type": "string"
                        },
                        "max_concurrent_runs": {
                          "type": "integer"
                        },
                        "name": {
                          "type": "string"
                        },
                        "timeout_seconds": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "required": [
                    "job_id",
                    "settings",
                    "created_time",
                    "creator_user_name"
                  ],
                  "type": "object"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        },
        "runAfter": {
          "Get_job_list": [
            "Succeeded"
          ]
        },
        "type": "ParseJson"
      }
    },
    "contentVersion": "1.0.0.0",
    "outputs": {},
    "parameters": {
      "$connections": {
        "defaultValue": {},
        "type": "Object"
      }
    },
    "triggers": {
      "manual": {
        "inputs": {
          "schema": {
            "properties": {
              "job_name": {
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "kind": "Http",
        "type": "Request"
      }
    }
  },
  "parameters": {
    "$connections": {
      "value": {
        "keyvault": {
          "connectionId": "/subscriptions/42127ebb-7b1c-4da1-8e7a-3b735c00a95c/resourceGroups/rg-westrac-demo-app/providers/Microsoft.Web/connections/keyvault",
          "connectionName": "keyvault",
          "connectionProperties": {
            "authentication": {
              "type": "ManagedServiceIdentity"
            }
          },
          "id": "/subscriptions/42127ebb-7b1c-4da1-8e7a-3b735c00a95c/providers/Microsoft.Web/locations/australiaeast/managedApis/keyvault"
        }
      }
    }
  }
}
